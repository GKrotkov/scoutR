---
title: "OPR Weight Estimation"
format: html
---

# Residuals against Match Percentile

It is difficult to optimize the weights because we are optimizing over an uncountably infinite grid. So we are interested in directly estimating the weights rather than numerically optimizing them.

Note that we standardize match scores on a per-event basis so we can make cross-event comparisons; so units are in standard deviations.

```{r setup, message = FALSE, warning = FALSE}
library(devtools)
load_all()
rm(list = ls())
load("../../data/district_quals_09_24.rda")

# normalize match scores so we can do cross-week and cross-season comparisons
# this simplifies a lot of later code
matches <- lapply(
    matches, 
    function(match_df){
        scaled <- scale(c(match_df$red_score, match_df$blue_score))
        match_df$red_score <- scaled[1:nrow(match_df)]
        match_df$blue_score <- scaled[(nrow(match_df) + 1):length(scaled)]
        return(match_df)
    })

library(extrafont)
library(gt)
gos_blue <- "#337DFC"
gos_red <- "#F7041A"

gos_theme <- theme_bw() + 
    theme(text = element_text(family = "Futura"))
```

To estimate the weighting, we will fit a regular unweighted regression for each event and investigate the relationship between the residuals and the match number. To make comparison possible between events with different numbers of matches, we need to convert each match to a proportion of the progress through the tournament that the match took place at.

```{r}
fit_opr <- function(match_df){
    return(
        fit_lineup_lm(
            match_df, responses = list(
                red = match_df$red_score, blue = match_df$blue_score)
        )
    )
}

normalize_match_number <- function(opr_residual){
    # we know we can divide the length by 2 because there are 2 alliances/match
    alliance_corrected <- ((1:length(opr_residual) - 1) %% 
                               (length(opr_residual) / 2)) + 1
    return((alliance_corrected / length(opr_residual)) * 2)
}

fits <- lapply(matches, fit_opr)

residuals <- lapply(fits, function(fit){return(residuals(fit))})
fitteds <- lapply(fits, function(fit){return(fitted(fit))})
# match percentile is the match number divided by the number of matches
match_percentile <- unlist(lapply(residuals, normalize_match_number), 
                           use.names = FALSE)

viz <- data.frame(
    resids = unlist(residuals, use.names = FALSE),
    sq_resids = unlist(residuals, use.names = FALSE) ^ 2,
    match_percentile = match_percentile
)

sq_resid_fit <- lm(sq_resids ~ match_percentile, data = viz)

ggplot(viz, aes(x = match_percentile, y = sq_resids)) + 
    geom_point(col = gos_red, alpha = 0.2) + 
    geom_smooth(method = "lm", formula = y ~ x, col = "black") +
    annotate("label", 
             x = mean(viz$match_percentile), 
             y = mean(viz$sq_resids), 
             label = paste0(
                 "Slope: ", round(coefficients(sq_resid_fit)[2], 3))
             ) + 
    labs(title = "SLR residuals slightly decrease as the tournament proceeds", 
         x = "Qual Match Percentile", y = "Squared Residual") + 
    theme(text = element_text(family = "Futura"), 
          panel.background = element_rect(fill = "#FFFFFF", color = "#FFFFFF", 
                                          linewidth = 0.5, linetype = "solid"), 
          panel.grid.major = element_line(linewidth = 0.5, linetype = "solid", 
                                          color = gos_blue), 
          panel.grid.minor = element_line(linewidth = 0.25, linetype = "solid", 
                                          color = gos_blue))
```

# Residual Slope Weight Estimation

This estimator did not turn out well - actively worse than unweighteds

```{r, include = FALSE}
estimate_weights_by_residual <- function(event_matches){
    fit <- fit_lineup_lm(
        event_matches, 
        list(red = event_matches$red_score, blue = event_matches$blue_score)
    )
    
    # sort residuals to be in match order
    resid <- c(rbind(
        residuals(fit)[1:nrow(event_matches)], 
        residuals(fit)[(nrow(event_matches) + 1):(2 * nrow(event_matches))]
    ))
    
    # repeat 1:nrow(matches) twice each for the two alliances in each match
    resid_fit <- lm(residuals(fit) ~ rep(1:nrow(event_matches), each = 2))
    # linear prediction fit for the weights
    w <- coefficients(resid_fit)[1] + 
        (coefficients(resid_fit)[2] * 1:nrow(event_matches))
    
    # normalize to ensure nonnegativity
    w <- (w - min(w)) / (max(w) - min(w))
    return(w)
}

rm(estimate_weights_by_residual)
```

# Bin Variance Weight Estimates

```{r}
n_bins <- 6
cuts <- cut(match_percentile, breaks = n_bins)

bin_vars <- rep(0, length(unique(cuts)))
bin_fitteds <- rep(0, length(unique(cuts)))
# use standardized residuals to account for year and event week
for (i in 1:length(unique(cuts))){
    bin_vars[i] <- var(unlist(residuals)[cuts == levels(cuts)[i]])
    bin_fitteds[i] <- var(unlist(fitteds)[cuts == levels(cuts)[i]])
}

plot(x = 1:length(bin_vars), y = bin_vars, 
     xlab = "Bin Number", ylab = "Normalized Residual Variance", 
     main = "Residual Variance by Binned Tournament Progress")

plot(x = 1:length(bin_fitteds), y = bin_fitteds, 
     xlab = "Bin Number", ylab = "Normalized Fitted Value Variance", 
     main = "Residual Fitted Values by Binned Tournament Progress")
```

# Linear Approximation to Bin Variance

Looking at the plot with varying numbers of bins, we'll model the variance in the residuals as two lines, one for the left-hand half of the data and one for the right-hand half of the data. We'll do two regressions to model this, one for match percentiles less than 0.5 and one for match percentiles greater than or equal to 0.5

```{r}
idx <- 1:(floor(length(bin_vars) / 2))
first_half_fit <- lm(bin_vars[idx] ~ idx)
idx <- (ceiling(length(bin_vars) / 2)):length(bin_vars)
second_half_fit <- lm(bin_vars[idx] ~ idx)

plot(x = 1:length(bin_vars), y = bin_vars, 
     xlab = "Bin Number", ylab = "Normalized Residual Variance", 
     main = "Two lines approximate the variance relationship")
abline(first_half_fit, col = gos_blue)
abline(second_half_fit, col = gos_red)
```

Now we need to write the variances in terms of the slopes, and then turn the variances into weights by inverting them.

```{r}
weights_from_lines <- function(intercept_1, intercept_2, n_bins, slope_1, slope_2){
    first_half <- rep(intercept_1, floor(n_bins / 2))
    first_half <- first_half + (slope_1 * (1:length(first_half) - 1))
    second_half <- rep(intercept_2 + (slope_2 * ((floor(n_bins / 2) + 1))), 
                       ceiling(n_bins / 2))
    second_half <- second_half + (slope_2 * (1:length(second_half) - 1))
    result <- 1 / c(first_half, second_half)
    names(result) <- NULL
    return(result)
}

w_linear <- weights_from_lines(
    coefficients(first_half_fit)[1], coefficients(second_half_fit)[1], n_bins,
    coefficients(first_half_fit)[2], coefficients(second_half_fit)[2]
)

w_bin_resid_vars <- 1 / bin_vars

w_bin_fitted_vars <- 1 / bin_fitteds

save(w_linear, w_bin_resid_vars, w_bin_fitted_vars, 
     file = "../../data/opr_weights.rda")
```
