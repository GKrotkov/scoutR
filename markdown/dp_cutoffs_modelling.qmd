---
title: "District Points Modelling"
format: html
---

```{r}
rm(list = ls())
devtools::load_all()
```

# Modeling District Point Threshold - DCMP

I'll start with predicting the cutoff to qualify for DCMP, since that is a more stable problem than CMP qualification. 

## Data Collection

What are the key variables? 
- number of teams that competed in the district
- number of slots at the DCMP
- cutoff

```{r}
# in 2018 they changed the format of the data from the FIRST database, so we'll
# start there.
dkeys <- c(
    "2019tx", paste0(2022:2024, "fit"), paste0(2018:2024, "fim"), 
    paste0(2018:2024, "chs"), paste0(2018:2024, "isr"), 
    paste0(2018:2024, "fma"), paste0(2018:2024, "fnc"), 
    paste0(2018:2024, "ne"), paste0(2018:2024, "ont"), 
    paste0(2018:2024, "pnw"), paste0(2018:2024, "pch"), 
    paste0(2018:2024, "fin")
)

# remove 2020 and 2021 bc COVID
dkeys <- dkeys[-grep("(2020|2021)", dkeys)]

rankings <- lapply(dkeys, district_rankings, 
                   separate_events = TRUE, event_breakdown = TRUE)
names(rankings) <- dkeys

district_size <- sapply(
    rankings, 
    function(d_rankings){ 
        # count a team only if they showed up to at least one event
        sum(d_rankings$point_total > d_rankings$rookie_bonus, na.rm = TRUE)
    }
)

dcmp_size <- sapply(
    rankings, 
    function(d_ranking){
        # count the number of teams that have a nonzero number of points for 
        # an event which has the "district_cmp_event_" prefix col == TRUE
        qp_cidx <- startsWith(colnames(d_ranking), "qual_points_")
        flag_cidx <- startsWith(colnames(d_ranking), "district_cmp_")
        qp_mat <- d_ranking[, qp_cidx] > 0
        flag_mat <- as.matrix(d_ranking[, flag_cidx])
        # the "and" operator combines the QP condition and the DCMP condition
        return(sum(rowSums(qp_mat & flag_mat, na.rm = TRUE)))
    }
)

predcmp_pts <- lapply(
    rankings, function(rankings){
        predcmp_pts <- rankings$total_event_1 + rankings$total_event_2
        names(predcmp_pts) <- rankings$team_key
        return(predcmp_pts)
    }
)

predcmp_pts <- lapply(
    predcmp_pts, 
    function(v){
        return(sort(v, decreasing = TRUE))
    }
)

# the cutoff is the nth ranked team in predcmp points, where n is the number 
# of slots at the DCMP. Teams that score below that number of points will go, 
# but I won't be modelling decline behavior here (this may vary significantly
# by district and is very hard to model.)
dcmp_cutoffs <- c()
for (i in seq_along(predcmp_pts)){
    dcmp_cutoffs <- c(dcmp_cutoffs, predcmp_pts[[i]][dcmp_size[i]])
}

# define dcmp "selectivity" as |district| / |dcmp| so that higher numbers
# mean a more selective DCMP
analysis <- data.frame(
    key = dkeys, year = as.numeric(substr(dkeys, 1, 4)), 
    district = substr(dkeys, 5, nchar(dkeys)),
    district_size = district_size, dcmp_size = dcmp_size, 
    dcmp_cutoff = dcmp_cutoffs, dcmp_selectivity = district_size / dcmp_size
)

# handle renaming
renames <- c(tx = "fit", mar = "fma")
```

## Analysis

Taking the log of the predictor seems to linearize the relationship the most.

```{r eda}
plot(analysis$district_size, analysis$dcmp_cutoff)
plot(analysis$dcmp_size, analysis$dcmp_cutoff)
plot(analysis$dcmp_selectivity, analysis$dcmp_cutoff)
plot(log(analysis$dcmp_selectivity), analysis$dcmp_cutoff)
plot(log(analysis$dcmp_selectivity), log(analysis$dcmp_cutoff))
plot(analysis$dcmp_selectivity, log(analysis$dcmp_cutoff))
```

Note that predictions from this model are likely a slight overestimate, because we counted the number of teams in the district based on the number who show up to events, while before the events run you don't know who's going to show up!

Looking at the Cook's distance plot we see 2022ont and 2022isr as the major outliers - this makes sense, because those areas of the world maintained more serious COVID lockdown procedures into 2022 while the United States did not. I don't think this is worth throwing those examples out of the data.

```{r}
fit <- lm(dcmp_cutoff ~ log(dcmp_selectivity), data = analysis)

plot(fit, which = 1:6)

summary(fit)
```

## Testing

Let's test on some data we didn't include in the training set! That is, districts before 2018. 

```{r}
dkeys_pre2018 <- c(
    paste0(2009:2017, "fim"), paste0(2012:2017, "mar"), 
    paste0(2013:2017, "ne"), paste0(2014:2017, "pnw"), 
    paste0(2015:2017, "fin", paste0(2016:2017, "chs")), 
    paste0(2016:2017, "pch"), paste0(2016:2017, "fnc"), 
    "2017isr", "2017ont"
)

# oh man never mind the data format changes makes this really annoying.
# I did manually check it for Michigan and Mid-Atlantic. Overall was pretty 
# good (average error around 5), but there were 2 years with 8ish point error
# which is a little rough.
```


# CMP Qualification Modelling

## Data Collection

Ok, so how do I find the number of slots each district had at the world championship each year... in a programmatic way?

```{r}

```

