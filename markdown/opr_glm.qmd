---
title: "OPR GLM"
format: html
---

# Regularization

```{r}
rm(list = ls())
library(devtools)
library(glmnet)
load_all()
```

## Elastic Net Regression CV Optimization

```{r}
opt_lambda <- function(event_code, step = 0.1){
    match_df <- event_matches(event_code, match_type = "qual")
    if (is.null(match_df)) return(NA)
    design <- data.matrix(lineup_design_matrix(match_df))
    response <- c(match_df$blue_score, match_df$red_score)
    # lambdas to consider
    grid <- 10 ^ seq(-2, 2, by = step)
    ridge_cv <- cv.glmnet(
        design, response, alpha = 0, lambda = grid, intercept = FALSE
    )
    return(ridge_cv$lambda.min)
}

cv_elasticnet <- function(event_code, lambda_step = 0.1, alpha_step = 0.05){
    match_df <- event_matches(event_code, match_type = "qual")
    if (is.null(match_df)) return(NA)
    design <- data.matrix(lineup_design_matrix(match_df))
    response <- c(match_df$blue_score, match_df$red_score)
    # setup CV grid
    lambda_grid <- 10 ^ seq(-2, 2, by = lambda_step)
    lambda_grid <- c(0, lambda_grid) # lambda = 0 --> SLR, as control
    alpha_grid <- seq(0, 1, by = alpha_step)
    cv_results <- matrix(
        NA, nrow = length(alpha_grid), ncol = length(lambda_grid)
    )
    colnames(cv_results) <- paste("Lambda:", lambda_grid)
    rownames(cv_results) <- paste("Alpha:", alpha_grid)
    
    for (i in seq_along(alpha_grid)){
        # nfolds = nrow(match_df), grouped = FALSE gives LOOCV
        ridge_cv <- cv.glmnet(
            design, response, alpha = alpha_grid[i], lambda = lambda_grid, 
            intercept = FALSE, nfolds = nrow(match_df), grouped = FALSE
        )
        # CVM retrieves the cross validated MSEs
        cv_results[i, ] <- ridge_cv$cvm
    }
    return(cv_results)
}

events <- c(
    year_events(2022, official = TRUE, keys = TRUE), 
    year_events(2023, official = TRUE, keys = TRUE),
    year_events(2024, official = TRUE, keys = TRUE)
)

cv_results <- list()

for (i in seq_along(events)){
    cv_results[[i]] <- cv_elasticnet(events[i])
}

names(cv_results) <- events

save(cv_results, file = "data/elasticnet_cv.rda")

```

## BRMS with Statbotics as a prior

Can we use a team's Statbotics EPA as a prior?

```{r}
library(brms)
event_key <- "2024new"
std_dev <- 5 # how much should we expect a normal team's EPA to shift?

match_df <- event_matches(event_key, match_type = "qual")
teams <- id2int(event_teams(event_key, keys = TRUE))
sb_data <- lapply(teams, read_team_event_statbotics, event_key)
pre_epas <- sapply(sb_data, function(sb){sb$epa_start})
coef_names <- paste0("frc", sapply(sb_data, function(sb){sb$team}))

priors <- do.call(c, lapply(1:length(coef_names), function(i) {
    set_prior(paste0("normal(", pre_epas[i], ", ", std_dev, ")"), 
              class = "b", coef = coef_names[i])
}))


design <- lineup_design_matrix(match_df)
design$response <- c(match_df$blue_score, match_df$red_score)

model <- brm(
    formula = response ~ 0 + .,
    data = design,
    prior = priors,
    family = gaussian()
)

preds <- predict(model)
mse_brms <- mean((preds[, "Estimate"] - design$response) ^ 2)
lr_fit <- fit_event_lr(event_key)
mse_lr <- mean((predict(lr_fit) - design$response) ^ 2)
```
