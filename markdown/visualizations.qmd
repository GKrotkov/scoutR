---
title: "visualizations"
format: html
---

# Idle amp efficiency ideas

```{r}
library(devtools)
load_all()

newton <- event_matches("2024new", match_type = "qual")
newton <- newton %>%
    mutate(
        red_teleop_note_count = red_teleopAmpNoteCount + 
            red_teleopSpeakerNoteCount + red_teleopSpeakerNoteAmplifiedCount,
        red_amp_eff = red_teleopTotalNotePoints / red_teleop_note_count, 
        blue_teleop_note_count = blue_teleopAmpNoteCount + 
            blue_teleopSpeakerNoteCount + blue_teleopSpeakerNoteAmplifiedCount,
        blue_amp_eff = blue_teleopTotalNotePoints / blue_teleop_note_count)

fit <- fit_lineup_lm(
    newton, list(red = newton$red_amp_eff, blue = newton$blue_amp_eff))

viz <- data.frame(id = names(coefficients(fit)), amp_eff = coefficients(fit))

fit <- fit_lineup_lm(
    newton, 
    list(red = newton$red_teleop_note_count, 
         blue = newton$blue_teleop_note_count))

viz$volume <- coefficients(fit)

viz$id <- substr(viz$id, 4, nchar(viz$id))

plt <- ggplot(viz, aes(x = amp_eff, y = volume, label = id)) + 
    geom_text(alpha = 0.4)

library(plotly)
library(dplyr)
library(gapminder)
library(babynames)

ggplotly(plt)
```

# 2017 Points Efficiency

```{r}
library(tidyverse)
library(plotly)
library(reshape2)

df <- data.frame(
    gears = 1:12, 
    pts = c(0, rep(40, 4), rep(80, 6), 120), 
    eff = c(rep(40 / 2, 2), rep(40 / 4, 4), rep(40 / 6, 6))
)

df <- melt(df, "gears")
df$variable <- ifelse(df$variable == "pts", "Points", "Points/Gear")

ggplot(df, aes(x = gears, y = value, col = variable)) + 
    geom_step() + 
    labs(title = "Steamworks (2017) Gear Scoring", 
         subtitle = "Ignoring auto or playoff bonuses",
         x = "# of Gears Scored", y = "Value", 
         color = "") + 
    scale_x_continuous(breaks = 1:12) + 
    theme_bw()
```

# OPR Stabilization

for a given event, we want to graph the spread of OPRs as a function of the number of matches played.

I'll choose not to use any weighting for now because I don't want to confuse anyone, but ideally we would use the stepwise-optimized weights in `../data/optimized_opr_weights.rda`.

```{r}
rm(list = ls())
library(devtools)
library(tidyverse)
load_all()
```

```{r}
event_code <- "2024paca"
event_name <- event(event_code, TRUE)$name
result <- event_opr_progression(event_code, standardize = TRUE)

plot_event_opr_stability <- function(
    event_code, response_name = "score", standardize = FALSE, w = NULL
){
    event_name <- event(event_code, TRUE)$name
    df <- event_opr_progression(event_code, response_name, standardize, w)
    viz <- df %>%
        pivot_longer(cols = -c(match_num, mpt), 
                     names_to = "team", values_to = "coefficient")
    
    team_plt <- ggplot(viz, aes(x = mpt, y = coefficient, color = team)) + 
        geom_line(alpha = 0.5) + 
        geom_point(alpha = 0.5, size = 0.2) + 
        labs(title = "OPR Event Progression", 
             subtitle = paste0(event_name, " (", event_code, ")"), 
             x = "Matches per team", 
             y = "OPR Value") + 
        theme_bw() + 
        guides(color = "none")
    
    viz <- data.frame(
        sd = apply(df[, 1:(ncol(df) - 2)], 1, sd), 
        mpt = df$mpt
    )
    
    event_plt <- ggplot(viz, aes(x = mpt, y = sd)) + 
        geom_line() + 
        labs(title = "OPR Stability", 
             subtitle = paste0(event_name, " (", event_code, ")"), 
             x = "Matches per team", y = "OPR Standard Deviation") + 
        theme_bw()
    
    # explicit plot output to avoid function suppression
    print(team_plt)
    print(event_plt) 
}

plot_event_opr_stability(event_code)
```

# Plot multiple event OPR SDs

```{r}
event_codes <- events(2024, official = TRUE, keys = TRUE)

result <- data.frame()

for (i in seq_along(event_codes)){
    df <- event_opr_progression(event_codes[i])
    if (is.null(df)) next # handles cases with no qual matches
    result <- rbind(
        result, 
        data.frame(sd = apply(df[, 1:(ncol(df) - 2)], 1, sd), 
                   mpt = df$mpt, 
                   event = event_codes[i])
    )
}

ggplot(result, aes(x = mpt, y = log(sd))) + 
    geom_point(alpha = 0.1) + 
    #geom_line(alpha = 0.4, aes(color = event)) + 
    labs(title = "OPR Stability (log)", 
         x = "Matches per team", y = "OPR Standard Deviation") + 
    theme_bw() + 
    guides(color = "none")
```

# Time Series Modeling of Regression Stability

```{r}
rm(list = ls())
library(devtools)
load_all()

event_code <- "2024paca"
df <- event_opr_progression(event_code, standardize = TRUE)
progression_ts <- ts(df[, 1:50])
diff_ts <- diff(progression_ts)
# take the absolute value because we're interested in the magnitude of the 
# differences, not their direction
# exercise for a student: delete this line, see if they can identify the 
# problem!
diff_ts <- abs(diff_ts)
# @TODO maybe adjust this to a moving average
mean_diff <- ts(apply(diff_ts, 1, mean))

plot(mean_diff)
```

