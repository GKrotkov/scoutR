---
title: "Playground"
format: html
---


```{r}
# loading the scoutR library: 
# https://github.com/GKrotkov/scoutR
library(devtools); load_all()
```

# Double Harmonies?

```{r}
cresc_evnts <- events(2024, keys = TRUE)
cresc_matches <- lapply(cresc_evnts, event_matches)
cresc_matches <- cresc_matches[!is.na(cresc_matches)]

get_harmonies <- function(df){
    return(c(df$blue_endGameHarmonyPoints, df$red_endGameHarmonyPoints))
}

# How many alliances had 4 harmony points?
suppressWarnings(
    sum(unlist(sapply(cresc_matches, get_harmonies)) == 4, na.rm = TRUE)
)
```

# WOW Team Counts

```{r}
load("../data/teams_yearly_2024.rda")

fma_teams <- c()

# split into two loops bc 2019 was the first year of "FMA"
for (i in 2012:2018){
    fma_teams <- c(fma_teams, district_teams(paste0(i, "mar"), keys = TRUE))
}

for (i in 2019:2024){
    fma_teams <- c(fma_teams, district_teams(paste0(i, "fma"), keys = TRUE))
}

fma_teams <- unique(fma_teams)

wow <- teams_yearly %>%
    filter(year >= 2012) %>%
    filter(state_prov %in% c("OH", "PA", "WV", "Ohio",
                             "Pennsylvania", "West Virginia")) %>%
    filter(!(key %in% fma_teams)) %>%
    mutate(
        state_prov = case_when(
            state_prov == "PA" ~ "Pennsylvania",
            state_prov == "WV" ~ "West Virginia",
            state_prov == "OH" ~ "Ohio",
            TRUE ~ state_prov
        )
    ) %>%
    mutate(
        state_prov = case_when(
            state_prov == "Pennsylvania" ~ "W. Pennsylvania",
            TRUE ~ state_prov
        )
    ) %>%
    group_by(year, state_prov) %>%
    summarize(count = n())

ggplot(wow, aes(x = as.character(year), y = count, fill = state_prov)) +
    geom_bar(stat = "identity", position = position_dodge(), color = "black") +
    labs(title = "WOW Annual Team Count",
         subtitle = "2012 - 2024",
         x = "Year", y = "Count",
         fill = "State",
         caption = "Data from frc-events API via TheBlueAlliance") +
    theme_bw()

```

# Modeling District Point Threshold

We'll start with just CMP qualification. I'm choosing to subset to 2018 and later because that's when TBA starts reporting CMP qualification.

@TODO need to account for the overall size of the championship in each given year

Maybe it would be easier to just try to model it based on percentile points?

```{r}
# TBA first started reporting CMP qualification in 2018
district_keys <- c(
    "2019tx", paste0(2022:2024, "fit"), paste0(2018:2024, "fim"), 
    paste0(2018:2024, "chs"), paste0(2018:2024, "isr"), 
    paste0(2018:2024, "fma"), paste0(2018:2024, "fnc"), 
    paste0(2018:2024, "ne"), paste0(2018:2024, "ont"), 
    paste0(2018:2024, "pnw"), paste0(2018:2024, "pch"), 
    paste0(2018:2024, "fin")
)

# remove 2020 and 2021 bc COVID
district_keys <- district_keys[-grep("(2020|2021)", district_keys)]

rankings <- lapply(district_keys, district_rankings, 
                   separate_events = TRUE, event_breakdown = TRUE)
names(rankings) <- district_keys

district_size <- sapply(
    rankings, 
    function(rankings){ 
        sum(rankings$point_total > 0, na.rm = TRUE)
    }
)
district_df <- data.frame(key = district_keys, size = district_size)
names(district_size) <- district_keys

predcmp_pts <- lapply(
    rankings, function(rankings){
        predcmp_pts <- rankings$total_event_1 + rankings$total_event_2
        names(predcmp_pts) <- rankings$team_key
        return(predcmp_pts)
    }
)


```

